#' @param geosmall The smaller sf geography that can be summarized up into a larger geography
#'
#' @return An sf dataframe that has been intersected between both geographies and now contains the calculated area of all geographies
#' and the percentage of intersection for the small and large geographies.
#' @export
#'
#' @examples
#' DallasCity <- tigris::places(state = "TX") %>%
#' select(GEOID == 4819000)
GeoIntersect <- function(x, y)
{
if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
}
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
DallasTracts <- NTX_Tracts[DallasCity, ] %>%
st_transform(crs = "ESRI:102738")
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
plot(test["geometry"])
DallasTracts <- NTX_Tracts[DallasCity, ]
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
plot(test["geometry"])
NTX_Tracts <- tigris::tracts(state = "TX", county = c("Dallas County", "Collin County", "Denton County", "Rockwall County", "Kaufman County"))
DallasTracts <- NTX_Tracts[DallasCity, ]
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
plot(test["geometry"])
plot(DallasCity["geometry"])
plot(NTX_Tracts["geometry"])
plot(DallasTracts["geometry"])
plot(DallasInt["geometry"])
DallasInt <- GeoIntersect(x = DallasCity, y = DallasTracts)
plot(DallasInt["geometry"])
GeoIntersect <- function(x, y)
{
if("geometry" %in% colnames(x) & colnames(y))
{
if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
} else {
print("sf attribute columns must be named geometry for both sf dataframes")
}
}
GeoIntersect <- function(x, y)
{
if("geometry" %in% colnames(x) & colnames(y))
{
if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
} else {
print("sf attribute columns must be named geometry for both sf dataframes")
}
}
DallasInt <- GeoIntersect(x = DallasCity, y = DallasTracts)
GeoIntersect <- function(x, y)
{
if("geometry" %in% colnames(x))
{
if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
} else {
print("sf attribute columns must be named geometry for both sf dataframes")
}
}
DallasInt <- GeoIntersect(x = DallasCity, y = DallasTracts)
GeoIntersect <- function(x, y)
{
if("geometry" %in% c(colnames(x), colnames(y)))
{
if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
} else {
print("sf attribute columns must be named geometry for both sf dataframes")
}
}
DallasInt <- GeoIntersect(x = DallasCity, y = DallasTracts)
GeoIntersect <- function(x, y)
{
if("geometry" %in% colnames(x) & "geometry" %in% colnames(y))
{
if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
} else {
print("sf attribute columns must be named geometry for both sf dataframes")
}
}
DallasInt <- GeoIntersect(x = DallasCity, y = DallasTracts)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
??deframe
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
?places
TexasCities <- places(state = "TX")
DallasCity <- filter(TexasCities, GEOID == "4819000")
plot(DallasCity["geometry"])
NTX_Tracts <- tracts(state = "TX", county = c("Dallas County", "Collin County", "Denton County"))
plot(NTX_Tracts["geometry"])
DallasTracts <- NTX_Tracts[DallasCity, ]
DallasInt <- GeoIntersect(x = DallasCity, y = DallasTracts)
plot(DallasInt["geometry"])
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
View(TexasCities)
devtools::document()
View(TexasCities)
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
?%>%
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
usethis::use_pipe()
devtools::document()
devtools::document()
usethis::use_pipe()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::check()
usethis::use_pipe()
devtools::document()
devtools::document()
devtools::check()
?tigris
?voting_districts()
?voting_districts(state = "TX", county = "Dallas County")
test <- voting_districts(state = "TX", county = "Dallas County")
plot(test)
?roads
?congressional_districts
test <- congressional_districts(state = "TX")
test["geometry"]
plot(test["geometry"])
?pumas()
?school_districts
?counties
?regions
?places
?urban_areas
?county_subdivisions
test <- tigris::county_subdivisions(state = "TX", county = "Dallas County")
plot(test["geometry"])
test <- tigris::school_districts(state = "TX")
plot(test["geometry"])
test <- tigris::places(state = "TX")
?zctas
test <- tigris::zctas(state = "TX", year = 2010)
test <- tigris::congressional_districts(state = "TX")
plot(test["geometry"])
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
??ggthemes_data
devtools::document()
devtools::check()
extrafont::fonts()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
extrafont::fonts()
devtools::document()
devtools::check()
#' @export
#'
#' @import ggplot2
#' @import ggthemes
#' @import tibble
#' @import extrafont
#' @examples
#' ggplot2::ggplot(iris, ggplot2::aes(x=Petal.Length, y=Sepal.Width, color = Species)) +
#' ggplot2::geom_point() +
#' theme_cpal()
install.packages("showtext")
library(showtext)
font_add_google(family = "Poppins")
font_add_google("Poppins", family = "Poppins")
loadfonts(device = "win")
font_import()
??font_import
devtools::document()
devtools::document()
devtools::document()
devtools::check()
#' @export
#'
#' @import ggplot2
#' @import ggthemes
#' @import tibble
#' @import showtext
#' @examples
#' ggplot2::ggplot(iris, ggplot2::aes(x=Petal.Length, y=Sepal.Width, color = Species)) +
#' ggplot2::geom_point() +
#' theme_cpal()
showtext_auto()
devtools::document()
devtools::document()
devtools::check()
??font_add_google()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
install_github("childpovertyactionlab/CPAL")
devtools::install_github("childpovertyactionlab/CPAL")
devtools::install_github("childpovertyactionlab/CPAL")
devtools::install_github("childpovertyactionlab/CPAL")
devtools::install_github("childpovertyactionlab/CPAL", force = TRUE)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
#### List of North Texas Counties Surrounding Dallas County #####
ntx_county <- c("Dallas County",
"Collin County",
"Denton County",
"Tarrant County",
"Ellis County",
"Rockwall County",
"Kaufman County",
"Johnson County"
)
#### List of available firearm types in NIBRS Incidents #####
firearms <- c("Handgun",
"Firearm (Type Not Stated)",
"Assault Weapon",
"Unknown Type Gun",
"Rifle",
"Other/Unknown Gun",
"Shotgun",
"Other Gun")
#### List of available firearm types in NIBRS Incidents #####
firearms <- rbind("Handgun",
"Firearm (Type Not Stated)",
"Assault Weapon",
"Unknown Type Gun",
"Rifle",
"Other/Unknown Gun",
"Shotgun",
"Other Gun")
#### List of North Texas Counties Surrounding Dallas County #####
ntx_county <- cbind("Dallas County",
"Collin County",
"Denton County",
"Tarrant County",
"Ellis County",
"Rockwall County",
"Kaufman County",
"Johnson County"
)
#### List of available firearm types in NIBRS Incidents #####
firearms <- cbind("Handgun",
"Firearm (Type Not Stated)",
"Assault Weapon",
"Unknown Type Gun",
"Rifle",
"Other/Unknown Gun",
"Shotgun",
"Other Gun")
view(firearms)
view(ntx_county)
view(ntx_county)
#### List of North Texas Counties Surrounding Dallas County #####
ntx_county <- rbind("Dallas County",
"Collin County",
"Denton County",
"Tarrant County",
"Ellis County",
"Rockwall County",
"Kaufman County",
"Johnson County"
)
view(ntx_county)
#### List of available firearm types in NIBRS Incidents #####
firearms <- rbind("Handgun",
"Firearm (Type Not Stated)",
"Assault Weapon",
"Unknown Type Gun",
"Rifle",
"Other/Unknown Gun",
"Shotgun",
"Other Gun")
View(ntx_county)
View(firearms)
View(firearms)
#### List of available firearm types in NIBRS Incidents #####
firearms <- rbind("Handgun",
"Firearm (Type Not Stated)",
"Assault Weapon",
"Unknown Type Gun",
"Rifle",
"Other/Unknown Gun",
"Shotgun",
"Other Gun") %>%
rename(firearms = V1)
#### List of North Texas Counties Surrounding Dallas County #####
ntx_county <- rbind("Dallas County",
"Collin County",
"Denton County",
"Tarrant County",
"Ellis County",
"Rockwall County",
"Kaufman County",
"Johnson County"
)
#### List of available firearm types in NIBRS Incidents #####
firearms <- rbind("Handgun",
"Firearm (Type Not Stated)",
"Assault Weapon",
"Unknown Type Gun",
"Rifle",
"Other/Unknown Gun",
"Shotgun",
"Other Gun")
save(ntx_county, "data/ntx_county.RData")
save(ntx_county, file = "data/ntx_county.RData")
save(firearms, file = "data/ntx_county.RData")
save(firearms, file = "data/firearms.RData")
usethis::use_data(firearms, firearms)
usethis::use_data(ntx_county, ntx_county)
devtools::check()
devtools::check()
devtools::document()
devtools::document(firearms)
devtools::document("data/firearms")
devtools::document()
devtools::check()
devtools::check()
devtools::build()
devtools::build()
cpal_style <- "https://api.mapbox.com/styles/v1/owencpal/ckecb71jp22ct19qc1id28jku/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1Ijoib3dlbmNwYWwiLCJhIjoiY2tlYnR3emdxMGNhZzMwb2EzZWR4ajloNCJ9.P7Mujz8F3Rssq5-Q6dcvMw"
map_attr <- "Â© <a href='https://www.mapbox.com/map-feedback/'>Mapbox</a> Basemap Â© <a href='https://childpovertyactionlab.org/'>Child Poverty Action Lab</a>"
usethis::use_data(cpal_style, cpal_mapbox)
cpal_style <- "https://api.mapbox.com/styles/v1/owencpal/ckecb71jp22ct19qc1id28jku/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1Ijoib3dlbmNwYWwiLCJhIjoiY2tlYnR3emdxMGNhZzMwb2EzZWR4ajloNCJ9.P7Mujz8F3Rssq5-Q6dcvMw"
usethis::use_data(cpal_style, cpal_mapbox)
cpal_mapbox <- "https://api.mapbox.com/styles/v1/owencpal/ckecb71jp22ct19qc1id28jku/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1Ijoib3dlbmNwYWwiLCJhIjoiY2tlYnR3emdxMGNhZzMwb2EzZWR4ajloNCJ9.P7Mujz8F3Rssq5-Q6dcvMw"
usethis::use_data(cpal_mapbox)
cpal_leaflet <- "Â© <a href='https://www.mapbox.com/map-feedback/'>Mapbox</a> Basemap Â© <a href='https://childpovertyactionlab.org/'>Child Poverty Action Lab</a>"
usethis::use_data(cpal_leaflet)
load("~/GitHub/CPALtools/data/cpal_leaflet.rda")
dpd_vgc <- c("AGG ASSAULT - NFV", "ROBBERY-BUSINESS", "ROBBERY-INDIVIDUAL", "BURGLARY-RESIDENCE", "BURGLARY-BUSINESS", "MURDER & NONNEGLIGENT MANSLAUGHTER")
usethis::use_data(dpd_vgc)
acs_variables <- c(
tot_pop = "B01003_001", #total population
pop_18t24 = "S1501_C01_001", #population 18 to 24
pop_u18 = "S0101_C01_022", #population under 18
emp_o16 = "B23025_004",
pop_o16 = "B23025_001",
pop_3t4 = "B09001_004", #population between 3 to 4
med_inc = "B19013_001", #median household income
med_rent = "B25105_001", #median monthly housing costs
gini = "B19083_001", #gini coefficient
less_hs = "B06009_002", #total population less than high school
hs_deg = "B06009_003", #total with high school degree
some_col = "B06009_004", #total with some college
ba_deg = "B06009_005", #total with 4 year bachelors degree
grad_deg = "B06009_006", #total with graduate degree
tot_deg = "B06009_001", #total population for degrees
his_pop = "B03002_012", #hispanic population
wh_pop = "B03002_003", #white population
bl_pop = "B03002_004", #black population
as_pop = "B03002_006", #asian population
oohh = "B25106_002", #owner-occupid households
rohh = "B25106_024", #renter-occupied households
thh = "B25106_001", #total households
snap = "S2201_C03_001", #total households receiving snap/public assistance
emp = "S0802_C01_001", #employed over 16
pop_bp = "S1701_C02_001", #population below poverty
bp_u18 = "S1701_C02_002", #population under 18 below poverty
ocb1 = "B25106_006", #owner cost-burdened
ocb2 = "B25106_010",
ocb3 = "B25106_014",
ocb4 = "B25106_018",
ocb5 = "B25106_022",
rcb1 = "B25106_028", #renter cost-burdened
rcb2 = "B25106_032",
rcb3 = "B25106_036",
rcb4 = "B25106_040",
rcb5 = "B25106_044"
)
view(acs_variables)
base::view(acs_variables)
usethis::use_data(acs_variables)
