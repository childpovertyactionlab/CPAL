panel.grid.minor = element_blank(),
strip.background = element_rect(),
legend.key.width = unit(0.5, units = "in"),
plot.caption = element_text(size = 36, face = "italic"),
legend.spacing = unit(0, "in"),
legend.key.height = unit(0.25, "in"),
legend.spacing.x = unit(0.1, "in"),
legend.justification = "center",
legend.margin=margin(4,4,4,4),
legend.box.spacing = margin(0.5)
)
}
ggplot(data = mtcars, aes(x = hp, y = mpg, group = gear)) +
geom_point() +
theme_cpal()
(ggthemes::theme_foundation(base_size = base_size, base_family = base_family) +
theme(
line = element_line(colour = "#b4b4b4"),
rect = element_rect(fill = "#fdfdff",
linetype = "solid",
size = 3,
colour = NA),
text = element_text(family = "Poppins", face = "bold", colour = "#6c6c6c"),
axis.title = element_text(),
axis.title.x = element_text(vjust = 2),
axis.title.y = element_text(vjust = 2),
axis.text = element_text(color = "#595959"),
axis.ticks = element_blank(),
#axis.ticks.length = unit(6, "pt"),
#axis.line = element_line(color = "#595959", size = 1, linetype = "solid"),
legend.background = element_rect(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank(),
legend.box = "horizontal",
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 2, 0, 0), "cm"),
#plot.margin = unit(t = 2, r = 3, b = 2, l = 2),
panel.border = element_rect(size = 1, color = "#595959"),
panel.grid.major = element_line(colour = "#595959", linetype = "dotted", size = 0.5),
panel.grid.minor = element_blank(),
strip.background = element_rect(),
legend.key.width = unit(0.5, units = "in"),
plot.caption = element_text(size = 36, face = "italic"),
legend.spacing = unit(0, "in"),
legend.key.height = unit(0.25, "in"),
legend.spacing.x = unit(0.1, "in"),
legend.justification = "center",
legend.margin=margin(4,4,4,4),
legend.box.spacing = margin(0.5)
)
theme_cpal <- function(base_size = 24, base_family = "sans") {
font_add_google("Poppins", family = "Poppins")
showtext::showtext_auto()
colors <- deframe(ggthemes::ggthemes_data[["fivethirtyeight"]])
(ggthemes::theme_foundation(base_size = base_size, base_family = base_family) +
theme(
line = element_line(colour = "#b4b4b4"),
rect = element_rect(fill = "#fdfdff",
linetype = "solid",
size = 3,
colour = NA),
text = element_text(family = "Poppins", face = "bold", colour = "#6c6c6c"),
axis.title = element_text(),
axis.title.x = element_text(vjust = 2),
axis.title.y = element_text(vjust = 2),
axis.text = element_text(color = "#595959"),
axis.ticks = element_blank(),
#axis.ticks.length = unit(6, "pt"),
#axis.line = element_line(color = "#595959", size = 1, linetype = "solid"),
legend.background = element_rect(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank(),
legend.box = "horizontal",
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 2, 0, 0), "cm"),
#plot.margin = unit(t = 2, r = 3, b = 2, l = 2),
panel.border = element_rect(size = 1, color = "#595959"),
panel.grid.major = element_line(colour = "#d1cfcf", linetype = "dotted", size = 0.25),
panel.grid.minor = element_blank(),
strip.background = element_rect(),
legend.key.width = unit(0.5, units = "in"),
plot.caption = element_text(size = 36, face = "italic"),
legend.spacing = unit(0, "in"),
legend.key.height = unit(0.25, "in"),
legend.spacing.x = unit(0.1, "in"),
legend.justification = "center",
legend.margin=margin(4,4,4,4),
legend.box.spacing = margin(0.5)
)
}
ggplot(data = mtcars, aes(x = hp, y = mpg, group = gear)) +
geom_point() +
theme_cpal()
theme_cpal <- function(base_size = 24, base_family = "sans") {
font_add_google("Poppins", family = "Poppins")
showtext::showtext_auto()
colors <- deframe(ggthemes::ggthemes_data[["fivethirtyeight"]])
(ggthemes::theme_foundation(base_size = base_size, base_family = base_family) +
theme(
line = element_line(colour = "#b4b4b4"),
rect = element_rect(fill = "#fdfdff",
linetype = "solid",
size = 3,
colour = NA),
text = element_text(family = "Poppins", face = "bold", colour = "#6c6c6c"),
axis.title = element_text(),
axis.title.x = element_text(vjust = 2),
axis.title.y = element_text(vjust = 2),
axis.text = element_text(color = "#595959"),
axis.ticks = element_blank(),
#axis.ticks.length = unit(6, "pt"),
#axis.line = element_line(color = "#595959", size = 1, linetype = "solid"),
legend.background = element_rect(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank(),
legend.box = "horizontal",
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 2, 0, 0), "cm"),
#plot.margin = unit(t = 2, r = 3, b = 2, l = 2),
panel.border = element_rect(size = 1, color = "#595959"),
panel.grid.major = element_line(colour = "#ababab", linetype = "dotted", size = 0.25),
panel.grid.minor = element_blank(),
strip.background = element_rect(),
legend.key.width = unit(0.5, units = "in"),
plot.caption = element_text(size = 36, face = "italic"),
legend.spacing = unit(0, "in"),
legend.key.height = unit(0.25, "in"),
legend.spacing.x = unit(0.1, "in"),
legend.justification = "center",
legend.margin=margin(4,4,4,4),
legend.box.spacing = margin(0.5)
)
}
ggplot(data = mtcars, aes(x = hp, y = mpg, group = gear)) +
geom_point() +
theme_cpal()
theme_cpal <- function(base_size = 24, base_family = "sans") {
#  font_add_google("Poppins", family = "Poppins")
#  showtext::showtext_auto()
colors <- deframe(ggthemes::ggthemes_data[["fivethirtyeight"]])
(ggthemes::theme_foundation(base_size = base_size, base_family = base_family) +
theme(
line = element_line(colour = "#b4b4b4"),
rect = element_rect(fill = "#fdfdff",
linetype = "solid",
size = 3,
colour = NA),
text = element_text(family = "Poppins", face = "bold", colour = "#6c6c6c"),
axis.title = element_text(),
axis.title.x = element_text(vjust = 2),
axis.title.y = element_text(vjust = 2),
axis.text = element_text(color = "#595959"),
axis.ticks = element_blank(),
#axis.ticks.length = unit(6, "pt"),
#axis.line = element_line(color = "#595959", size = 1, linetype = "solid"),
legend.background = element_rect(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank(),
legend.box = "horizontal",
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 2, 0, 0), "cm"),
#plot.margin = unit(t = 2, r = 3, b = 2, l = 2),
panel.border = element_rect(size = 1, color = "#595959"),
panel.grid.major = element_line(colour = "#ababab", linetype = "dotted", size = 0.25),
panel.grid.minor = element_blank(),
strip.background = element_rect(),
legend.key.width = unit(0.5, units = "in"),
plot.caption = element_text(size = 36, face = "italic"),
legend.spacing = unit(0, "in"),
legend.key.height = unit(0.25, "in"),
legend.spacing.x = unit(0.1, "in"),
legend.justification = "center",
legend.margin=margin(4,4,4,4),
legend.box.spacing = margin(0.5)
)
}
ggplot(data = mtcars, aes(x = hp, y = mpg, group = gear)) +
geom_point() +
theme_cpal()
#'
#' @import ggplot2
#' @import ggthemes
#' @import tibble
#' @import showtext
#' @import sysfonts
#' @examples
#' ggplot2::ggplot(iris, ggplot2::aes(x=Petal.Length, y=Sepal.Width, color = Species)) +
#' ggplot2::geom_point() +
#' theme_cpal()
theme_cpal <- function(base_size = 24, base_family = "poppins") {
#  font_add_google("Poppins", family = "Poppins")
#  showtext::showtext_auto()
colors <- deframe(ggthemes::ggthemes_data[["fivethirtyeight"]])
(ggthemes::theme_foundation(base_size = base_size, base_family = base_family) +
theme(
line = element_line(colour = "#b4b4b4"),
rect = element_rect(fill = "#fdfdff",
linetype = "solid",
size = 3,
colour = NA),
text = element_text(family = "Poppins", face = "bold", colour = "#6c6c6c"),
axis.title = element_text(),
axis.title.x = element_text(vjust = 2),
axis.title.y = element_text(vjust = 2),
axis.text = element_text(color = "#595959"),
axis.ticks = element_blank(),
#axis.ticks.length = unit(6, "pt"),
#axis.line = element_line(color = "#595959", size = 1, linetype = "solid"),
legend.background = element_rect(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank(),
legend.box = "horizontal",
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 2, 0, 0), "cm"),
#plot.margin = unit(t = 2, r = 3, b = 2, l = 2),
panel.border = element_rect(size = 1, color = "#595959"),
panel.grid.major = element_line(colour = "#ababab", linetype = "dotted", size = 0.25),
panel.grid.minor = element_blank(),
strip.background = element_rect(),
legend.key.width = unit(0.5, units = "in"),
plot.caption = element_text(size = 36, face = "italic"),
legend.spacing = unit(0, "in"),
legend.key.height = unit(0.25, "in"),
legend.spacing.x = unit(0.1, "in"),
legend.justification = "center",
legend.margin=margin(4,4,4,4),
legend.box.spacing = margin(0.5)
)
}
theme_cpal <- function(base_size = 24, base_family = "poppins") {
#  font_add_google("Poppins", family = "Poppins")
#  showtext::showtext_auto()
colors <- deframe(ggthemes::ggthemes_data[["fivethirtyeight"]])
(ggthemes::theme_foundation(base_size = base_size, base_family = base_family) +
theme(
line = element_line(colour = "#b4b4b4"),
rect = element_rect(fill = "#fdfdff",
linetype = "solid",
size = 3,
colour = NA),
text = element_text(family = "Poppins", face = "bold", colour = "#6c6c6c"),
axis.title = element_text(),
axis.title.x = element_text(vjust = 2),
axis.title.y = element_text(vjust = 2),
axis.text = element_text(color = "#595959"),
axis.ticks = element_blank(),
#axis.ticks.length = unit(6, "pt"),
#axis.line = element_line(color = "#595959", size = 1, linetype = "solid"),
legend.background = element_rect(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank(),
legend.box = "horizontal",
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 2, 0, 0), "cm"),
#plot.margin = unit(t = 2, r = 3, b = 2, l = 2),
panel.border = element_rect(size = 1, color = "#595959"),
panel.grid.major = element_line(colour = "#ababab", linetype = "dotted", size = 0.25),
panel.grid.minor = element_blank(),
strip.background = element_rect(),
legend.key.width = unit(0.5, units = "in"),
plot.caption = element_text(size = 36, face = "italic"),
legend.spacing = unit(0, "in"),
legend.key.height = unit(0.25, "in"),
legend.spacing.x = unit(0.1, "in"),
legend.justification = "center",
legend.margin=margin(4,4,4,4),
legend.box.spacing = margin(0.5)
)
}
ggplot(data = mtcars, aes(x = hp, y = mpg, group = gear)) +
geom_point() +
theme_cpal()
devtools::check()
#'
#' @import ggplot2
#' @import ggthemes
#' @import tibble
#' @import showtext
#' @import sysfonts
#' @examples
#' ggplot2::ggplot(iris, ggplot2::aes(x=Petal.Length, y=Sepal.Width, color = Species)) +
#' ggplot2::geom_point() +
#' theme_cpal()
theme_cpal <- function(base_size = 24, base_family = "poppins") {
font_add_google("Poppins", family = "Poppins")
#  showtext::showtext_auto()
colors <- deframe(ggthemes::ggthemes_data[["fivethirtyeight"]])
(ggthemes::theme_foundation(base_size = base_size, base_family = base_family) +
theme(
line = element_line(colour = "#b4b4b4"),
rect = element_rect(fill = "#fdfdff",
linetype = "solid",
size = 3,
colour = NA),
text = element_text(family = "Poppins", face = "bold", colour = "#6c6c6c"),
axis.title = element_text(),
axis.title.x = element_text(vjust = 2),
axis.title.y = element_text(vjust = 2),
axis.text = element_text(color = "#595959"),
axis.ticks = element_blank(),
#axis.ticks.length = unit(6, "pt"),
#axis.line = element_line(color = "#595959", size = 1, linetype = "solid"),
legend.background = element_rect(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank(),
legend.box = "horizontal",
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 2, 0, 0), "cm"),
#plot.margin = unit(t = 2, r = 3, b = 2, l = 2),
panel.border = element_rect(size = 1, color = "#595959"),
panel.grid.major = element_line(colour = "#ababab", linetype = "dotted", size = 0.25),
panel.grid.minor = element_blank(),
strip.background = element_rect(),
legend.key.width = unit(0.5, units = "in"),
plot.caption = element_text(size = 36, face = "italic"),
legend.spacing = unit(0, "in"),
legend.key.height = unit(0.25, "in"),
legend.spacing.x = unit(0.1, "in"),
legend.justification = "center",
legend.margin=margin(4,4,4,4),
legend.box.spacing = margin(0.5)
)
}
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::check()
??mutate
library(tidyverse)
devtools::check()
??%>%
library(tidyverse)
devtools::check()
rlang::last_trace()
test <- "test"
(test)
rlang::last_trace()
devtools::check()
rlang::last_trace()
devtools::check()
library(tidyverse)
library(httr)
ckan_query <- function(sql_query, geometry = FALSE, nested = FALSE) {
# Base CKAN SQL query endpoint
ckan_sql_url <- "https://devckan.data-cave.org/api/action/datastore_search_sql"
# URL encode the SQL query
encoded_query <- URLencode(sql_query)
# Fetch the primary dataset
response <- GET(paste0(ckan_sql_url, "?sql=", encoded_query))
# Check response status
if (status_code(response) != 200) {
stop(paste("Error:", status_code(response), content(response, "text", encoding = "UTF-8")))
}
# Parse the response
data <- fromJSON(content(response, "text", encoding = "UTF-8"))
# Handle nested or unnested results
df <- if (nested) {
data$result
} else {
as.data.frame(data$result$records)
}
# If geometry is enabled, check for 'geometry_wkt' column
if (geometry) {
if ("geometry_wkt" %in% colnames(df)) {
# Convert to spatial object using sf
df <- df %>% st_as_sf(wkt = "geometry_wkt")
} else {
warning("No geometry features in this dataset")
}
}
return(df)
}
unique_neighs <- ckan_query(
paste0("SELECT DISTINCT neigh_id FROM \"4c61d0e6-f369-4bcb-bf83-03e36c314869\""),
geometry = FALSE, nested = FALSE) %>%
filter(!is.na(neigh_id))
library(tidyverse)
library(httr)
library(json)
library(tidyverse)
library(httr)
library(jsonlite)
ckan_query <- function(sql_query, geometry = FALSE, nested = FALSE) {
# Base CKAN SQL query endpoint
ckan_sql_url <- "https://devckan.data-cave.org/api/action/datastore_search_sql"
# URL encode the SQL query
encoded_query <- URLencode(sql_query)
# Fetch the primary dataset
response <- GET(paste0(ckan_sql_url, "?sql=", encoded_query))
# Check response status
if (status_code(response) != 200) {
stop(paste("Error:", status_code(response), content(response, "text", encoding = "UTF-8")))
}
# Parse the response
data <- fromJSON(content(response, "text", encoding = "UTF-8"))
# Handle nested or unnested results
df <- if (nested) {
data$result
} else {
as.data.frame(data$result$records)
}
# If geometry is enabled, check for 'geometry_wkt' column
if (geometry) {
if ("geometry_wkt" %in% colnames(df)) {
# Convert to spatial object using sf
df <- df %>% st_as_sf(wkt = "geometry_wkt")
} else {
warning("No geometry features in this dataset")
}
}
return(df)
}
unique_neighs <- ckan_query(
paste0("SELECT DISTINCT neigh_id FROM \"4c61d0e6-f369-4bcb-bf83-03e36c314869\""),
geometry = FALSE, nested = FALSE) %>%
filter(!is.na(neigh_id))
View(unique_neighs)
install.packages(devtools)
install.packages("devtools")
#' Function to pull data using SQL from CKAN
#'
#' \code{ckan_query} allows users to pull data using a custom SQL query, with the option of adding geometry if present in the dataset. This function returns either a dataframe or a list including metadata and records.
#'
#' @param sql_query A string SQL query
#' @param geometry Boolean indicating if dataframe contains geometry or not. If TRUE, function returns a geometry object ready for mapping
#' @param nested Boolean indicating if function will return list including metadata and records. If FALSE, only records are returned
#'
#' @import tidyverse
#' @import httr
#' @import jsonlite
#' @md
#' @export
ckan_query <- function(sql_query, geometry = FALSE, nested = FALSE) {
# Base CKAN SQL query endpoint
ckan_sql_url <- "https://devckan.data-cave.org/api/action/datastore_search_sql"
# URL encode the SQL query
encoded_query <- URLencode(sql_query)
# Fetch the primary dataset
response <- GET(paste0(ckan_sql_url, "?sql=", encoded_query))
# Check response status
if (status_code(response) != 200) {
stop(paste("Error:", status_code(response), content(response, "text", encoding = "UTF-8")))
}
# Parse the response
data <- fromJSON(content(response, "text", encoding = "UTF-8"))
# Handle nested or unnested results
df <- if (nested) {
data$result
} else {
as.data.frame(data$result$records)
}
# If geometry is enabled, check for 'geometry_wkt' column
if (geometry) {
if ("geometry_wkt" %in% colnames(df)) {
# Convert to spatial object using sf
df <- df %>% st_as_sf(wkt = "geometry_wkt")
} else {
warning("No geometry features in this dataset")
}
}
return(df)
}
# unique_neighs <- ckan_query(
#   paste0("SELECT DISTINCT neigh_id FROM \"4c61d0e6-f369-4bcb-bf83-03e36c314869\""),
#   geometry = FALSE, nested = FALSE) %>%
#   filter(!is.na(neigh_id))
devtools::check()
devtools::check()
devtools::check()
#' Intersection of two sf geographies used to summarize variables between each
#'
#' @param polylg The larger sf geography that can be summarized down into a smaller geography
#' @param polysm The smaller sf geography that can be summarized up into a larger geography
#'
#' @return An sf dataframe that has been intersected between both geographies and now contains the calculated area of all geographies
#' and the percentage of intersection for the small and large geographies.
#' @export
GeoIntersect <- function(polylg = NULL,
polysm = NULL)
{
if("geometry" %in% colnames(polylg) & "geometry" %in% colnames(polysm))
{
if (sf::st_crs(polylg) == sf::st_crs(polysm)) {
polylg <- (polylg) %>%
dplyr::mutate(AreaLarge = as.numeric(sf::st_area(geometry)))
polysm <- (polysm) %>%
dplyr::mutate(AreaSmall = as.numeric(sf::st_area(geometry)))
sf::st_intersection(polylg, polysm) %>%
dplyr::mutate(AreaInt = as.numeric(sf::st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
} else {
print("sf attribute columns must be named geometry for both sf dataframes")
}
}
devtools::document()
conflicts()$`cpaltools::ckan_query`
devtools::install_github("child-poverty-action-lab/cpaltools")
devtools::install_github("childpovertyactionlab/cpaltools")
devtools::document()
devtools::document()
