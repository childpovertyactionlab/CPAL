print("Both sf objects must be set to the same crs")
}
}
test <- GeoIntersect(geolarge = DallasCity, geosmall = DallasTracts)
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
#' @param geolarge The larger sf geography that can be summarized down into a smaller geography
#' @param geosmall The smaller sf geography that can be summarized up into a larger geography
#'
#' @return An sf dataframe that has been intersected between both geographies and now contains the calculated area of all geographies
#' and the percentage of intersection for the small and large geographies.
#' @export
#'
#' @examples
#' DallasCity <- tigris::places(state = "TX") %>%
#' select(GEOID == 4819000)
GeoIntersect <- function(x = geolarge, y = geosmall)
{
if (st_crs(x) == st_crs(y)) {
x$AreaLarge <- as.numeric(st_area(.))
y$AreaSmall <- as.numeric(st_area(.))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area()),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
}
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
#' @param geolarge The larger sf geography that can be summarized down into a smaller geography
#' @param geosmall The smaller sf geography that can be summarized up into a larger geography
#'
#' @return An sf dataframe that has been intersected between both geographies and now contains the calculated area of all geographies
#' and the percentage of intersection for the small and large geographies.
#' @export
#'
#' @examples
#' DallasCity <- tigris::places(state = "TX") %>%
#' select(GEOID == 4819000)
GeoIntersect <- function(x = geolarge, y = geosmall)
{
if (st_crs(x) == st_crs(y)) {
x$AreaLarge <- as.numeric(st_area())
y$AreaSmall <- as.numeric(st_area())
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area()),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
}
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
#' @param geolarge The larger sf geography that can be summarized down into a smaller geography
#' @param geosmall The smaller sf geography that can be summarized up into a larger geography
#'
#' @return An sf dataframe that has been intersected between both geographies and now contains the calculated area of all geographies
#' and the percentage of intersection for the small and large geographies.
#' @export
#'
#' @examples
#' DallasCity <- tigris::places(state = "TX") %>%
#' select(GEOID == 4819000)
GeoIntersect <- function(x, y)
{
#  if (st_crs(x) == st_crs(y)) {
x$AreaLarge <- as.numeric(st_area())
y$AreaSmall <- as.numeric(st_area())
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area()),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
#  } else {
#    print("Both sf objects must be set to the same crs")
#  }
}
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
#' @param geolarge The larger sf geography that can be summarized down into a smaller geography
#' @param geosmall The smaller sf geography that can be summarized up into a larger geography
#'
#' @return An sf dataframe that has been intersected between both geographies and now contains the calculated area of all geographies
#' and the percentage of intersection for the small and large geographies.
#' @export
#'
#' @examples
#' DallasCity <- tigris::places(state = "TX") %>%
#' select(GEOID == 4819000)
GeoIntersect <- function(x, y)
{
#  if (st_crs(x) == st_crs(y)) {
#    x$AreaLarge <- as.numeric(st_area())
#    y$AreaSmall <- as.numeric(st_area())
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area()),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
#  } else {
#    print("Both sf objects must be set to the same crs")
#  }
}
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
#' @param geolarge The larger sf geography that can be summarized down into a smaller geography
#' @param geosmall The smaller sf geography that can be summarized up into a larger geography
#'
#' @return An sf dataframe that has been intersected between both geographies and now contains the calculated area of all geographies
#' and the percentage of intersection for the small and large geographies.
#' @export
#'
#' @examples
#' DallasCity <- tigris::places(state = "TX") %>%
#' select(GEOID == 4819000)
GeoIntersect <- function(x, y)
{
#  if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area()))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area()))
#    y$AreaSmall <- as.numeric(st_area())
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area()),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
#  } else {
#    print("Both sf objects must be set to the same crs")
#  }
}
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
#' @param geolarge The larger sf geography that can be summarized down into a smaller geography
#' @param geosmall The smaller sf geography that can be summarized up into a larger geography
#'
#' @return An sf dataframe that has been intersected between both geographies and now contains the calculated area of all geographies
#' and the percentage of intersection for the small and large geographies.
#' @export
#'
#' @examples
#' DallasCity <- tigris::places(state = "TX") %>%
#' select(GEOID == 4819000)
GeoIntersect <- function(x, y)
{
#  if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
#    y$AreaSmall <- as.numeric(st_area())
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area()),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
#  } else {
#    print("Both sf objects must be set to the same crs")
#  }
}
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
#' @param geolarge The larger sf geography that can be summarized down into a smaller geography
#' @param geosmall The smaller sf geography that can be summarized up into a larger geography
#'
#' @return An sf dataframe that has been intersected between both geographies and now contains the calculated area of all geographies
#' and the percentage of intersection for the small and large geographies.
#' @export
#'
#' @examples
#' DallasCity <- tigris::places(state = "TX") %>%
#' select(GEOID == 4819000)
GeoIntersect <- function(x, y)
{
#  if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
#    y$AreaSmall <- as.numeric(st_area())
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
#  } else {
#    print("Both sf objects must be set to the same crs")
#  }
}
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
View(test)
#' @param geolarge The larger sf geography that can be summarized down into a smaller geography
#' @param geosmall The smaller sf geography that can be summarized up into a larger geography
#'
#' @return An sf dataframe that has been intersected between both geographies and now contains the calculated area of all geographies
#' and the percentage of intersection for the small and large geographies.
#' @export
#'
#' @examples
#' DallasCity <- tigris::places(state = "TX") %>%
#' select(GEOID == 4819000)
GeoIntersect <- function(x, y)
{
if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
}
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
DallasTracts <- NTX_Tracts[DallasCity, ] %>%
st_transform(crs = "ESRI:102738")
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
plot(test["geometry"])
DallasTracts <- NTX_Tracts[DallasCity, ]
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
plot(test["geometry"])
NTX_Tracts <- tigris::tracts(state = "TX", county = c("Dallas County", "Collin County", "Denton County", "Rockwall County", "Kaufman County"))
DallasTracts <- NTX_Tracts[DallasCity, ]
test <- GeoIntersect(x = DallasCity, y = DallasTracts)
plot(test["geometry"])
plot(DallasCity["geometry"])
plot(NTX_Tracts["geometry"])
plot(DallasTracts["geometry"])
plot(DallasInt["geometry"])
DallasInt <- GeoIntersect(x = DallasCity, y = DallasTracts)
plot(DallasInt["geometry"])
GeoIntersect <- function(x, y)
{
if("geometry" %in% colnames(x) & colnames(y))
{
if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
} else {
print("sf attribute columns must be named geometry for both sf dataframes")
}
}
GeoIntersect <- function(x, y)
{
if("geometry" %in% colnames(x) & colnames(y))
{
if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
} else {
print("sf attribute columns must be named geometry for both sf dataframes")
}
}
DallasInt <- GeoIntersect(x = DallasCity, y = DallasTracts)
GeoIntersect <- function(x, y)
{
if("geometry" %in% colnames(x))
{
if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
} else {
print("sf attribute columns must be named geometry for both sf dataframes")
}
}
DallasInt <- GeoIntersect(x = DallasCity, y = DallasTracts)
GeoIntersect <- function(x, y)
{
if("geometry" %in% c(colnames(x), colnames(y)))
{
if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
} else {
print("sf attribute columns must be named geometry for both sf dataframes")
}
}
DallasInt <- GeoIntersect(x = DallasCity, y = DallasTracts)
GeoIntersect <- function(x, y)
{
if("geometry" %in% colnames(x) & "geometry" %in% colnames(y))
{
if (st_crs(x) == st_crs(y)) {
x <- x %>%
mutate(AreaLarge = as.numeric(st_area(geometry)))
y <- y %>%
mutate(AreaSmall = as.numeric(st_area(geometry)))
st_intersection(x, y) %>%
mutate(AreaInt = as.numeric(st_area(geometry)),
PerIntLg = AreaInt/AreaLarge,
PerIntSm = AreaInt/AreaSmall)
} else {
print("Both sf objects must be set to the same crs")
}
} else {
print("sf attribute columns must be named geometry for both sf dataframes")
}
}
DallasInt <- GeoIntersect(x = DallasCity, y = DallasTracts)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
??deframe
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
?places
TexasCities <- places(state = "TX")
DallasCity <- filter(TexasCities, GEOID == "4819000")
plot(DallasCity["geometry"])
NTX_Tracts <- tracts(state = "TX", county = c("Dallas County", "Collin County", "Denton County"))
plot(NTX_Tracts["geometry"])
DallasTracts <- NTX_Tracts[DallasCity, ]
DallasInt <- GeoIntersect(x = DallasCity, y = DallasTracts)
plot(DallasInt["geometry"])
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
View(TexasCities)
devtools::document()
View(TexasCities)
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
?%>%
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
usethis::use_pipe()
devtools::document()
devtools::document()
usethis::use_pipe()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::check()
usethis::use_pipe()
devtools::document()
devtools::document()
devtools::check()
?tigris
?voting_districts()
?voting_districts(state = "TX", county = "Dallas County")
test <- voting_districts(state = "TX", county = "Dallas County")
plot(test)
?roads
?congressional_districts
test <- congressional_districts(state = "TX")
test["geometry"]
plot(test["geometry"])
?pumas()
?school_districts
?counties
?regions
?places
?urban_areas
?county_subdivisions
test <- tigris::county_subdivisions(state = "TX", county = "Dallas County")
plot(test["geometry"])
test <- tigris::school_districts(state = "TX")
plot(test["geometry"])
test <- tigris::places(state = "TX")
?zctas
test <- tigris::zctas(state = "TX", year = 2010)
test <- tigris::congressional_districts(state = "TX")
plot(test["geometry"])
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
??ggthemes_data
devtools::document()
devtools::check()
extrafont::fonts()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
extrafont::fonts()
devtools::document()
devtools::check()
#' @export
#'
#' @import ggplot2
#' @import ggthemes
#' @import tibble
#' @import extrafont
#' @examples
#' ggplot2::ggplot(iris, ggplot2::aes(x=Petal.Length, y=Sepal.Width, color = Species)) +
#' ggplot2::geom_point() +
#' theme_cpal()
install.packages("showtext")
library(showtext)
font_add_google(family = "Poppins")
font_add_google("Poppins", family = "Poppins")
loadfonts(device = "win")
font_import()
??font_import
devtools::document()
devtools::document()
devtools::document()
devtools::check()
#' @export
#'
#' @import ggplot2
#' @import ggthemes
#' @import tibble
#' @import showtext
#' @examples
#' ggplot2::ggplot(iris, ggplot2::aes(x=Petal.Length, y=Sepal.Width, color = Species)) +
#' ggplot2::geom_point() +
#' theme_cpal()
showtext_auto()
devtools::document()
devtools::document()
devtools::check()
??font_add_google()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
